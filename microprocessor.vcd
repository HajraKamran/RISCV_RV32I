$date
	Thu Oct 12 07:48:15 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module microprocessor_tb $end
$var reg 1 ! clk $end
$var reg 1 " en $end
$var reg 1 # rst $end
$scope module u_microprocessor $end
$var wire 32 $ address_in [31:0] $end
$var wire 1 ! clk $end
$var wire 1 " en $end
$var wire 32 % in [31:0] $end
$var wire 1 # rst $end
$var wire 32 & wrap_out [31:0] $end
$var wire 32 ' wrap_load_out [31:0] $end
$var wire 32 ( uj_type [31:0] $end
$var wire 32 ) u_type [31:0] $end
$var wire 1 * store $end
$var wire 32 + sb_type [31:0] $end
$var wire 32 , s_type [31:0] $end
$var wire 32 - res_o [31:0] $end
$var wire 1 . reg_write $end
$var wire 2 / rd_sel [1:0] $end
$var wire 32 0 out4 [31:0] $end
$var wire 32 1 out3 [31:0] $end
$var wire 32 2 out2 [31:0] $end
$var wire 32 3 out [31:0] $end
$var wire 1 4 op_b $end
$var wire 1 5 op_a $end
$var wire 32 6 op2 [31:0] $end
$var wire 32 7 op1 [31:0] $end
$var wire 4 8 mask [3:0] $end
$var wire 1 9 load $end
$var wire 3 : imm_sel [2:0] $end
$var wire 32 ; i_type [31:0] $end
$var wire 32 < i_data_out [31:0] $end
$var wire 1 = enable $end
$var wire 32 > data_out [31:0] $end
$var wire 32 ? branch_out [31:0] $end
$var wire 4 @ alu_control [3:0] $end
$var wire 32 A address_out [31:0] $end
$var wire 32 B adder_out [31:0] $end
$var wire 1 C Jalr $end
$var wire 1 D Jal $end
$var wire 1 E Branch $end
$scope module u_adder0 $end
$var wire 32 F address_out [31:0] $end
$var reg 32 G adder_out [31:0] $end
$upscope $end
$scope module u_alu0 $end
$var wire 4 H op [3:0] $end
$var wire 32 I b [31:0] $end
$var wire 32 J a [31:0] $end
$var reg 32 K res_o [31:0] $end
$upscope $end
$scope module u_branch $end
$var wire 3 L func3 [2:0] $end
$var wire 32 M rs2 [31:0] $end
$var wire 32 N rs1 [31:0] $end
$var wire 1 E en $end
$var reg 32 O branch_out [31:0] $end
$upscope $end
$scope module u_control_unit0 $end
$var wire 3 P func3 [2:0] $end
$var wire 1 Q func7 $end
$var wire 7 R op [6:0] $end
$var wire 1 S s_type $end
$var wire 1 * s $end
$var wire 1 . reg_write $end
$var wire 1 T r_type $end
$var wire 1 4 op_b $end
$var wire 1 5 op_a $end
$var wire 2 U mem_to_reg [1:0] $end
$var wire 1 V lui $end
$var wire 1 9 loadout $end
$var wire 1 W load $end
$var wire 1 X jalr $end
$var wire 1 Y jal $end
$var wire 3 Z imm_sel [2:0] $end
$var wire 1 [ i_type $end
$var wire 1 = en $end
$var wire 1 \ branch $end
$var wire 1 ] auipc $end
$var wire 4 ^ alu_control [3:0] $end
$var wire 1 _ Lui $end
$var wire 1 C Jalr $end
$var wire 1 D Jal $end
$var wire 1 E Branch $end
$var wire 1 ` Auipc $end
$scope module u_controldecode0 $end
$var wire 3 a func3 [2:0] $end
$var wire 1 Q func7 $end
$var wire 1 S s_type $end
$var wire 1 T r_type $end
$var wire 1 V lui $end
$var wire 1 W load $end
$var wire 1 X jalr $end
$var wire 1 Y jal $end
$var wire 1 [ i_type $end
$var wire 1 \ branch $end
$var wire 1 ] auipc $end
$var reg 1 ` Auipc $end
$var reg 1 E Branch $end
$var reg 1 D Jal $end
$var reg 1 C Jalr $end
$var reg 1 _ Lui $end
$var reg 4 b alu_control [3:0] $end
$var reg 3 c imm_sel [2:0] $end
$var reg 1 9 loadout $end
$var reg 1 = mem_en $end
$var reg 2 d mem_to_reg [1:0] $end
$var reg 1 e next_sel $end
$var reg 1 5 op_a $end
$var reg 1 4 op_b $end
$var reg 1 . reg_write $end
$var reg 1 * s $end
$upscope $end
$scope module u_typedec0 $end
$var wire 7 f op [6:0] $end
$var reg 1 ] auipc $end
$var reg 1 [ i_type $end
$var reg 1 Y jal $end
$var reg 1 X jalr $end
$var reg 1 W load $end
$var reg 1 V lui $end
$var reg 1 T r_type $end
$var reg 1 S s_type $end
$var reg 1 \ sb_type $end
$upscope $end
$upscope $end
$scope module u_data_mem $end
$var wire 12 g address [11:0] $end
$var wire 1 ! clk $end
$var wire 1 * en $end
$var wire 4 h mask [3:0] $end
$var wire 32 i data_in [31:0] $end
$var reg 32 j data_out [31:0] $end
$upscope $end
$scope module u_imm_gen0 $end
$var wire 32 k instruc [31:0] $end
$var reg 12 l i [11:0] $end
$var reg 32 m i_type [31:0] $end
$var reg 12 n s [11:0] $end
$var reg 32 o s_type [31:0] $end
$var reg 32 p sb_type [31:0] $end
$var reg 32 q u_type [31:0] $end
$var reg 32 r uj_type [31:0] $end
$upscope $end
$scope module u_instruc_mem0 $end
$var wire 12 s address [11:0] $end
$var wire 1 ! clk $end
$var wire 1 " en $end
$var wire 32 t i_data_in [31:0] $end
$var reg 32 u i_data_out [31:0] $end
$upscope $end
$scope module u_mux1 $end
$var wire 32 v a [31:0] $end
$var wire 32 w b [31:0] $end
$var wire 32 x c [31:0] $end
$var wire 32 y d [31:0] $end
$var wire 32 z e [31:0] $end
$var wire 32 { f [31:0] $end
$var wire 32 | g [31:0] $end
$var wire 32 } h [31:0] $end
$var wire 3 ~ sel [2:0] $end
$var reg 32 !" out [31:0] $end
$upscope $end
$scope module u_mux2 $end
$var wire 32 "" b [31:0] $end
$var wire 1 4 sel $end
$var wire 32 #" out [31:0] $end
$var wire 32 $" a [31:0] $end
$upscope $end
$scope module u_mux3 $end
$var wire 32 %" a [31:0] $end
$var wire 32 &" c [31:0] $end
$var wire 32 '" d [31:0] $end
$var wire 2 (" sel [1:0] $end
$var wire 32 )" b [31:0] $end
$var reg 32 *" out [31:0] $end
$upscope $end
$scope module u_mux4 $end
$var wire 1 5 sel $end
$var wire 32 +" out [31:0] $end
$var wire 32 ," b [31:0] $end
$var wire 32 -" a [31:0] $end
$upscope $end
$scope module u_program_counter $end
$var wire 32 ." address_in [31:0] $end
$var wire 1 E branch $end
$var wire 32 /" branch_address [31:0] $end
$var wire 1 ! clk $end
$var wire 1 D jal $end
$var wire 32 0" jal_address [31:0] $end
$var wire 1 C jalr $end
$var wire 32 1" jalr_address [31:0] $end
$var wire 1 # rst $end
$var reg 32 2" address_out [31:0] $end
$upscope $end
$scope module u_regfile0 $end
$var wire 1 ! clk $end
$var wire 1 . en $end
$var wire 32 3" in [31:0] $end
$var wire 32 4" op1 [31:0] $end
$var wire 32 5" op2 [31:0] $end
$var wire 5 6" rd [4:0] $end
$var wire 5 7" rs1 [4:0] $end
$var wire 5 8" rs2 [4:0] $end
$var wire 1 # rst $end
$var integer 32 9" i [31:0] $end
$upscope $end
$scope module u_wrapmem $end
$var wire 2 :" byteadd [1:0] $end
$var wire 1 = en $end
$var wire 3 ;" func3 [2:0] $end
$var wire 1 9 load $end
$var wire 32 <" wrap_in [31:0] $end
$var wire 32 =" wrap_load_in [31:0] $end
$var reg 4 >" masking [3:0] $end
$var reg 32 ?" wrap_load_out [31:0] $end
$var reg 32 @" wrap_out [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx @"
bx ?"
bx >"
bx ="
b0 <"
b0 ;"
b10 :"
b100000 9"
b10 8"
b0 7"
b1010 6"
b0 5"
b0 4"
b10 3"
b0 2"
b10 1"
b10 0"
b10 /"
bz ."
b0 -"
b0 ,"
b0 +"
b10 *"
bx )"
b0 ("
bz '"
b100 &"
b10 %"
b0 $"
b10 #"
b10 ""
b10 !"
b0 ~
bz }
bz |
bz {
b1000000000000000000000 z
b10 y
b1010 x
b1010 w
b10 v
b1000000000010100010011 u
bz t
b0 s
b10 r
b1000000000000000000000 q
b1010 p
b1010 o
b1010 n
b10 m
b10 l
b1000000000010100010011 k
bx j
bx i
bx h
b0 g
b10011 f
0e
b0 d
b0 c
b0 b
b0 a
x`
x_
b0 ^
0]
0\
1[
b0 Z
0Y
0X
0W
0V
b0 U
0T
0S
b10011 R
0Q
b0 P
bx O
b0 N
b0 M
b0 L
b10 K
b0 J
b10 I
b0 H
b100 G
b0 F
0E
0D
0C
b100 B
b0 A
b0 @
bx ?
bx >
0=
b1000000000010100010011 <
b10 ;
b0 :
09
bx 8
b0 7
b0 6
05
14
b10 3
b10 2
b10 1
b0 0
b0 /
1.
b10 -
b1010 ,
b1010 +
0*
b1000000000000000000000 )
b10 (
bx '
bx &
bz %
bz $
0#
0"
0!
$end
#5000
b100000 9"
1!
#10000
0!
1#
#15000
b1 1
b1 *"
b1 3"
b1 :"
b1 -
b1 K
b1 %"
b1 /"
b1 0"
b1 1"
b1 2
b1 I
b1 #"
b1 3
b1 !"
b1 ""
b10 6"
b1 8"
b100000000000000000000 )
b100000000000000000000 q
b100000000000000000000 z
b100000000000 (
b100000000000 r
b100000000000 y
b10 +
b10 p
b10 x
b10 ,
b10 o
b10 w
b1 ;
b1 m
b1 v
b1 l
b10 n
b100000000000100010011 <
b100000000000100010011 k
b100000000000100010011 u
b1 s
b1000 B
b1000 G
b1000 &"
b100 A
b100 F
b100 ,"
b100 2"
1!
#20000
0!
#25000
b1000 0
b1000 J
b1000 +"
b11 :
b11 Z
b11 c
b11 ~
1D
b10 /
b10 U
b10 d
b10 ("
15
1Y
b1100 1
b1100 *"
b1100 3"
b0 :"
b101 g
b10100 -
b10100 K
b10100 %"
b10100 /"
b10100 0"
b10100 1"
14
1.
b1100 2
b1100 I
b1100 #"
0[
b1100 3
b1100 !"
b1100 ""
b1 6"
b1100 8"
b1101111 R
b1101111 f
b110000000000000000000000 )
b110000000000000000000000 q
b110000000000000000000000 z
b1100 (
b1100 r
b1100 y
b100000000000 +
b100000000000 p
b100000000000 x
b1 ,
b1 o
b1 w
b1100 ;
b1100 m
b1100 v
b1100 l
b1 n
b110000000000000011101111 <
b110000000000000011101111 k
b110000000000000011101111 u
b10 s
b1100 B
b1100 G
b1100 &"
b1000 A
b1000 F
b1000 ,"
b1000 2"
1!
#30000
0!
#35000
b1 :"
0D
b0 /
b0 U
b0 d
b0 ("
04
05
b1 2
b1 I
b1 #"
1T
0Y
b10 3
b10 !"
b10 ""
b0 g
b101 6"
b1 6
b1 M
b1 $"
b1 5"
b1 <"
b10 8"
b110011 R
b110011 f
b1000000000000000000000 )
b1000000000000000000000 q
b1000000000000000000000 z
b10 (
b10 r
b10 y
b100000000100 +
b100000000100 p
b100000000100 x
b101 ,
b101 o
b101 w
b10 ;
b10 m
b10 v
b10 l
b101 n
b1 -
b1 K
b1 %"
b1 /"
b1 0"
b1 1"
b1000000000001010110011 <
b1000000000001010110011 k
b1000000000001010110011 u
b1 1
b1 *"
b1 3"
b0 0
b0 J
b0 +"
b101 s
b11000 B
b11000 G
b11000 &"
b10100 A
b10100 F
b10100 ,"
b10100 2"
1!
#40000
0!
#45000
b0 :
b0 Z
b0 c
b0 ~
1C
14
1X
b1100 1
b1100 *"
b1100 3"
b0 :"
b11 g
b1100 -
b1100 K
b1100 %"
b1100 /"
b1100 0"
b1100 1"
1.
b0 2
b0 I
b0 #"
b1100 0
b1100 J
b1100 +"
0T
b0 3
b0 !"
b0 ""
b0 6"
b0 6
b0 M
b0 $"
b0 5"
b0 <"
b0 8"
b1100 7
b1100 N
b1100 -"
b1100 4"
b1 7"
b1100111 R
b1100111 f
b1000000000000000 )
b1000000000000000 q
b1000000000000000 z
b1000000000000000 (
b1000000000000000 r
b1000000000000000 y
b0 +
b0 p
b0 x
b0 ,
b0 o
b0 w
b0 ;
b0 m
b0 v
b0 l
b0 n
b1000000001100111 <
b1000000001100111 k
b1000000001100111 u
b110 s
b11100 B
b11100 G
b11100 &"
b11000 A
b11000 F
b11000 ,"
b11000 2"
1!
#50000
0!
#55000
1[
b1001 1
b1001 *"
b1001 3"
b1 :"
b10 g
b1001 -
b1001 K
b1001 %"
b1001 /"
b1001 0"
b1001 1"
0C
14
1.
b1000 2
b1000 I
b1000 #"
b1 0
b1 J
b1 +"
0X
b1000 3
b1000 !"
b1000 ""
b11 6"
b1000 8"
b1 7
b1 N
b1 -"
b1 4"
b10 7"
b10011 R
b10011 f
b100000010000000000000000 )
b100000010000000000000000 q
b100000010000000000000000 z
b10000000000001000 (
b10000000000001000 r
b10000000000001000 y
b100000000010 +
b100000000010 p
b100000000010 x
b11 ,
b11 o
b11 w
b1000 ;
b1000 m
b1000 v
b1000 l
b11 n
b100000010000000110010011 <
b100000010000000110010011 k
b100000010000000110010011 u
b11 s
b10000 B
b10000 G
b10000 &"
b1100 A
b1100 F
b1100 ,"
b1100 2"
b0 6
b0 M
b0 $"
b0 5"
b0 <"
1!
#60000
0!
#65000
b100 :
b100 Z
b100 c
b100 ~
1`
15
1]
b11000000000000000000010000 1
b11000000000000000000010000 *"
b11000000000000000000010000 3"
b0 :"
b100 g
b11000000000000000000010000 -
b11000000000000000000010000 K
b11000000000000000000010000 %"
b11000000000000000000010000 /"
b11000000000000000000010000 0"
b11000000000000000000010000 1"
14
1.
b11000000000000000000000000 2
b11000000000000000000000000 I
b11000000000000000000000000 #"
b10000 0
b10000 J
b10000 +"
0[
b11000000000000000000000000 3
b11000000000000000000000000 !"
b11000000000000000000000000 ""
b110 6"
b10000 8"
b0 7
b0 N
b0 -"
b0 4"
b0 7"
b10111 R
b10111 f
b11000000000000000000000000 )
b11000000000000000000000000 q
b11000000000000000000000000 z
b110000 (
b110000 r
b110000 y
b100110 +
b100110 p
b100110 x
b100110 ,
b100110 o
b100110 w
b110000 ;
b110000 m
b110000 v
b110000 l
b100110 n
b11000000000000001100010111 <
b11000000000000001100010111 k
b11000000000000001100010111 u
b100 s
b10100 B
b10100 G
b10100 &"
b10000 A
b10000 F
b10000 ,"
b10000 2"
1!
#70000
0!
#75000
b1 :"
04
05
b1 2
b1 I
b1 #"
1T
0]
b1000000000000000000000 3
b1000000000000000000000 !"
b1000000000000000000000 ""
b1 1
b1 *"
b1 3"
b0 g
b101 6"
b1 6
b1 M
b1 $"
b1 5"
b1 <"
b10 8"
b110011 R
b110011 f
b1000000000000000000000 )
b1000000000000000000000 q
b1000000000000000000000 z
b10 (
b10 r
b10 y
b100000000100 +
b100000000100 p
b100000000100 x
b101 ,
b101 o
b101 w
b10 ;
b10 m
b10 v
b10 l
b101 n
b1 -
b1 K
b1 %"
b1 /"
b1 0"
b1 1"
b1000000000001010110011 <
b1000000000001010110011 k
b1000000000001010110011 u
b0 0
b0 J
b0 +"
b101 s
b11000 B
b11000 G
b11000 &"
b10100 A
b10100 F
b10100 ,"
b10100 2"
1!
#80000
0!
#85000
b0 :
b0 Z
b0 c
b0 ~
1C
14
1X
b1100 1
b1100 *"
b1100 3"
b0 :"
b11 g
b1100 -
b1100 K
b1100 %"
b1100 /"
b1100 0"
b1100 1"
1.
b0 2
b0 I
b0 #"
b1100 0
b1100 J
b1100 +"
0T
b0 3
b0 !"
b0 ""
b0 6"
b0 6
b0 M
b0 $"
b0 5"
b0 <"
b0 8"
b1100 7
b1100 N
b1100 -"
b1100 4"
b1 7"
b1100111 R
b1100111 f
b1000000000000000 )
b1000000000000000 q
b1000000000000000 z
b1000000000000000 (
b1000000000000000 r
b1000000000000000 y
b0 +
b0 p
b0 x
b0 ,
b0 o
b0 w
b0 ;
b0 m
b0 v
b0 l
b0 n
b1000000001100111 <
b1000000001100111 k
b1000000001100111 u
b110 s
b11100 B
b11100 G
b11100 &"
b11000 A
b11000 F
b11000 ,"
b11000 2"
1!
#90000
0!
#95000
1[
b1001 1
b1001 *"
b1001 3"
b1 :"
b10 g
b1001 -
b1001 K
b1001 %"
b1001 /"
b1001 0"
b1001 1"
0C
14
1.
b1000 2
b1000 I
b1000 #"
b1 0
b1 J
b1 +"
0X
b1000 3
b1000 !"
b1000 ""
b11 6"
b1000 8"
b1 7
b1 N
b1 -"
b1 4"
b10 7"
b10011 R
b10011 f
b100000010000000000000000 )
b100000010000000000000000 q
b100000010000000000000000 z
b10000000000001000 (
b10000000000001000 r
b10000000000001000 y
b100000000010 +
b100000000010 p
b100000000010 x
b11 ,
b11 o
b11 w
b1000 ;
b1000 m
b1000 v
b1000 l
b11 n
b100000010000000110010011 <
b100000010000000110010011 k
b100000010000000110010011 u
b11 s
b10000 B
b10000 G
b10000 &"
b1100 A
b1100 F
b1100 ,"
b1100 2"
b0 6
b0 M
b0 $"
b0 5"
b0 <"
1!
#100000
0!
